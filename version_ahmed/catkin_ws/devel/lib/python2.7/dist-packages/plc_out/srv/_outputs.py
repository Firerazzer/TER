# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from plc_out/outputsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class outputsRequest(genpy.Message):
  _md5sum = "0f395eff070e43eb81cba235ff59111a"
  _type = "plc_out/outputsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 data_out_module
int16 data_out_position
bool data_out_value
"""
  __slots__ = ['data_out_module','data_out_position','data_out_value']
  _slot_types = ['int8','int16','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data_out_module,data_out_position,data_out_value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(outputsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data_out_module is None:
        self.data_out_module = 0
      if self.data_out_position is None:
        self.data_out_position = 0
      if self.data_out_value is None:
        self.data_out_value = False
    else:
      self.data_out_module = 0
      self.data_out_position = 0
      self.data_out_value = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_bhB().pack(_x.data_out_module, _x.data_out_position, _x.data_out_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.data_out_module, _x.data_out_position, _x.data_out_value,) = _get_struct_bhB().unpack(str[start:end])
      self.data_out_value = bool(self.data_out_value)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_bhB().pack(_x.data_out_module, _x.data_out_position, _x.data_out_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.data_out_module, _x.data_out_position, _x.data_out_value,) = _get_struct_bhB().unpack(str[start:end])
      self.data_out_value = bool(self.data_out_value)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_bhB = None
def _get_struct_bhB():
    global _struct_bhB
    if _struct_bhB is None:
        _struct_bhB = struct.Struct("<bhB")
    return _struct_bhB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from plc_out/outputsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class outputsResponse(genpy.Message):
  _md5sum = "fcdceee3a74b2fb5d19ad48da0766c7f"
  _type = "plc_out/outputsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string feedback_out

"""
  __slots__ = ['feedback_out']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feedback_out

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(outputsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.feedback_out is None:
        self.feedback_out = ''
    else:
      self.feedback_out = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.feedback_out
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feedback_out = str[start:end].decode('utf-8')
      else:
        self.feedback_out = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.feedback_out
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.feedback_out = str[start:end].decode('utf-8')
      else:
        self.feedback_out = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class outputs(object):
  _type          = 'plc_out/outputs'
  _md5sum = '97aea7623ae837c55d5e85ee1aae84af'
  _request_class  = outputsRequest
  _response_class = outputsResponse
