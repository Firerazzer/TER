// Generated by gencpp from file commande_plc/actuators.msg
// DO NOT EDIT!


#ifndef COMMANDE_PLC_MESSAGE_ACTUATORS_H
#define COMMANDE_PLC_MESSAGE_ACTUATORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace commande_plc
{
template <class ContainerAllocator>
struct actuators_
{
  typedef actuators_<ContainerAllocator> Type;

  actuators_()
    : actuators_data0(0)
    , actuators_data1(0)
    , actuators_data2(0)
    , R1D()
    , R1G()
    , V1()
    , D1()
    , R2D()
    , R2G()
    , V2()
    , D2()
    , ST1()
    , ST2()
    , ST3()
    , ST5()
    , ST4()
    , PI1()
    , PI2()
    , R11D()
    , R11G()
    , V11()
    , D11()
    , R12D()
    , R12G()
    , V12()
    , D12()
    , ST20()
    , ST21()
    , ST24()
    , ST23()
    , PI3()
    , PI4()  {
    }
  actuators_(const ContainerAllocator& _alloc)
    : actuators_data0(0)
    , actuators_data1(0)
    , actuators_data2(0)
    , R1D(_alloc)
    , R1G(_alloc)
    , V1(_alloc)
    , D1(_alloc)
    , R2D(_alloc)
    , R2G(_alloc)
    , V2(_alloc)
    , D2(_alloc)
    , ST1(_alloc)
    , ST2(_alloc)
    , ST3(_alloc)
    , ST5(_alloc)
    , ST4(_alloc)
    , PI1(_alloc)
    , PI2(_alloc)
    , R11D(_alloc)
    , R11G(_alloc)
    , V11(_alloc)
    , D11(_alloc)
    , R12D(_alloc)
    , R12G(_alloc)
    , V12(_alloc)
    , D12(_alloc)
    , ST20(_alloc)
    , ST21(_alloc)
    , ST24(_alloc)
    , ST23(_alloc)
    , PI3(_alloc)
    , PI4(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _actuators_data0_type;
  _actuators_data0_type actuators_data0;

   typedef uint16_t _actuators_data1_type;
  _actuators_data1_type actuators_data1;

   typedef uint16_t _actuators_data2_type;
  _actuators_data2_type actuators_data2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _R1D_type;
  _R1D_type R1D;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _R1G_type;
  _R1G_type R1G;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _V1_type;
  _V1_type V1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _D1_type;
  _D1_type D1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _R2D_type;
  _R2D_type R2D;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _R2G_type;
  _R2G_type R2G;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _V2_type;
  _V2_type V2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _D2_type;
  _D2_type D2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST1_type;
  _ST1_type ST1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST2_type;
  _ST2_type ST2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST3_type;
  _ST3_type ST3;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST5_type;
  _ST5_type ST5;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST4_type;
  _ST4_type ST4;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _PI1_type;
  _PI1_type PI1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _PI2_type;
  _PI2_type PI2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _R11D_type;
  _R11D_type R11D;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _R11G_type;
  _R11G_type R11G;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _V11_type;
  _V11_type V11;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _D11_type;
  _D11_type D11;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _R12D_type;
  _R12D_type R12D;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _R12G_type;
  _R12G_type R12G;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _V12_type;
  _V12_type V12;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _D12_type;
  _D12_type D12;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST20_type;
  _ST20_type ST20;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST21_type;
  _ST21_type ST21;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST24_type;
  _ST24_type ST24;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ST23_type;
  _ST23_type ST23;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _PI3_type;
  _PI3_type PI3;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _PI4_type;
  _PI4_type PI4;





  typedef boost::shared_ptr< ::commande_plc::actuators_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::commande_plc::actuators_<ContainerAllocator> const> ConstPtr;

}; // struct actuators_

typedef ::commande_plc::actuators_<std::allocator<void> > actuators;

typedef boost::shared_ptr< ::commande_plc::actuators > actuatorsPtr;
typedef boost::shared_ptr< ::commande_plc::actuators const> actuatorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::commande_plc::actuators_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::commande_plc::actuators_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace commande_plc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'commande_plc': ['/home/firerazzer/Documents/TER/version_ahmed/catkin_ws/src/commande_plc/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::commande_plc::actuators_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commande_plc::actuators_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commande_plc::actuators_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commande_plc::actuators_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commande_plc::actuators_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commande_plc::actuators_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::commande_plc::actuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b7a93773fddfccf01a51d45dab44996";
  }

  static const char* value(const ::commande_plc::actuators_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b7a93773fddfccfULL;
  static const uint64_t static_value2 = 0x01a51d45dab44996ULL;
};

template<class ContainerAllocator>
struct DataType< ::commande_plc::actuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "commande_plc/actuators";
  }

  static const char* value(const ::commande_plc::actuators_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::commande_plc::actuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 actuators_data0\n\
uint16 actuators_data1\n\
uint16 actuators_data2\n\
string R1D\n\
string R1G\n\
string V1\n\
string D1\n\
string R2D\n\
string R2G\n\
string V2\n\
string D2\n\
string ST1\n\
string ST2\n\
string ST3\n\
string ST5\n\
string ST4\n\
string PI1\n\
string PI2\n\
string R11D\n\
string R11G\n\
string V11\n\
string D11\n\
string R12D\n\
string R12G\n\
string V12\n\
string D12\n\
string ST20\n\
string ST21\n\
string ST24\n\
string ST23\n\
string PI3\n\
string PI4\n\
";
  }

  static const char* value(const ::commande_plc::actuators_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::commande_plc::actuators_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actuators_data0);
      stream.next(m.actuators_data1);
      stream.next(m.actuators_data2);
      stream.next(m.R1D);
      stream.next(m.R1G);
      stream.next(m.V1);
      stream.next(m.D1);
      stream.next(m.R2D);
      stream.next(m.R2G);
      stream.next(m.V2);
      stream.next(m.D2);
      stream.next(m.ST1);
      stream.next(m.ST2);
      stream.next(m.ST3);
      stream.next(m.ST5);
      stream.next(m.ST4);
      stream.next(m.PI1);
      stream.next(m.PI2);
      stream.next(m.R11D);
      stream.next(m.R11G);
      stream.next(m.V11);
      stream.next(m.D11);
      stream.next(m.R12D);
      stream.next(m.R12G);
      stream.next(m.V12);
      stream.next(m.D12);
      stream.next(m.ST20);
      stream.next(m.ST21);
      stream.next(m.ST24);
      stream.next(m.ST23);
      stream.next(m.PI3);
      stream.next(m.PI4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actuators_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::commande_plc::actuators_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::commande_plc::actuators_<ContainerAllocator>& v)
  {
    s << indent << "actuators_data0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.actuators_data0);
    s << indent << "actuators_data1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.actuators_data1);
    s << indent << "actuators_data2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.actuators_data2);
    s << indent << "R1D: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.R1D);
    s << indent << "R1G: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.R1G);
    s << indent << "V1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.V1);
    s << indent << "D1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.D1);
    s << indent << "R2D: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.R2D);
    s << indent << "R2G: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.R2G);
    s << indent << "V2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.V2);
    s << indent << "D2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.D2);
    s << indent << "ST1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST1);
    s << indent << "ST2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST2);
    s << indent << "ST3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST3);
    s << indent << "ST5: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST5);
    s << indent << "ST4: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST4);
    s << indent << "PI1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.PI1);
    s << indent << "PI2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.PI2);
    s << indent << "R11D: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.R11D);
    s << indent << "R11G: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.R11G);
    s << indent << "V11: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.V11);
    s << indent << "D11: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.D11);
    s << indent << "R12D: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.R12D);
    s << indent << "R12G: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.R12G);
    s << indent << "V12: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.V12);
    s << indent << "D12: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.D12);
    s << indent << "ST20: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST20);
    s << indent << "ST21: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST21);
    s << indent << "ST24: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST24);
    s << indent << "ST23: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ST23);
    s << indent << "PI3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.PI3);
    s << indent << "PI4: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.PI4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMANDE_PLC_MESSAGE_ACTUATORS_H
